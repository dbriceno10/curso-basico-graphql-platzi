"Valida los tipos de nivel"
enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topics: String
  people: [Student]
  level: Level
}

type Student {
  _id: ID!
  name: String!
  email: String!
}
"los ! son para hacer que un campo sea obligatorio"
type Query {
  "Devuelve todos los cursos, getQuerys va a ser de tipo Course"
  getCourses: [Course]
  "Devuelve un curso por id"
  getCourse(id: ID!): Course
  "Devuelve todos los estudiantes"
  getStudents: [Student]
  "Devuelve un estudiante por id"
  getStudent(id: ID!): Student
}

"Las mutations seran para poder guaradar o enviar informaci√≥n a la base de datos"
input CourseInput {
  title: String!
  teacher: String
  description: String!
  topics: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topics: String
}

input StudentEditInput {
  name: String
  email: String
}

input StudentInput {
  name: String!
  email: String!
}

type Mutation {
  "Crea un curso"
  createCourse(input: CourseInput!): Course
  "edita un curso"
  editCourse(_id: ID!, input: CourseEditInput): Course
  # createStudent(name: String!, email: String!): Student
  "crea un estudiante"
  createStudent(input: StudentInput!): Student
  "edita un estudiante"
  editStudent(_id: ID!, input: StudentEditInput): Student
  "Elimina un curso"
  deleteCourse(_id: ID!): Course
  "Elimina un estudiante"
  deleteStudent(_id: ID!): Student
  "Agrega un estudiante a un curso"
  addStudentToCourse(courseId: ID!, studentId: ID!): Course
}
